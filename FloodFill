/*Task
Given a 2-dimensional grid and a zero-based (x,y) coordinate, flood-fill the area on the grid containing that coordinate with the given value. Two squares in the grid belong to the same area if they contain the same value and are adjacent either horizontally or vertically, but not diagonally.

See: https://en.wikipedia.org/wiki/Flood_fill

Grid
The grid is represented as a 2-dimensional rectangular array.

Example
A flood fill with 4 at the point (0, 1) of the following array would look like this:

   [[1, 2, 3],     [[1, 4, 3],
    [1, 2, 2],  ->  [1, 4, 4],
    [2, 3, 2]]      [2, 3, 4]]*/
    
using System;

namespace FloodFill
{
    class Program
    {
        static void Main(string[] args)
        {
            var array = new int[,]
            {{1,2,3},
            {1,2,2},
            {2,3,2}};
            int x = 0;
            int y = 1;
            int newValue = 4;
            Console.WriteLine(array[x, y]);
            FloodFill(array, x, y, newValue);
        }

        private static int[,] FloodFill(int[,] array, int x, int y, int newValue)
        {
            foreach (int i in array)
            {
                Console.WriteLine(i);
            }
            int a = array[x, y];
            array[x, y] = newValue;
            Console.WriteLine($"{x},{y},{array.GetLength(1)-1}");
            if (x>0 && array[x - 1, y] == a && adjacent(array, x - 1, y, newValue))
            {
                array = FloodFill(array, y, x - 1, newValue);
            }
            if (x < array.GetLength(0) - 1 && array[x + 1, y] == a && adjacent(array, x + 1, y, newValue))
            {
                array = FloodFill(array, y, x + 1, newValue);
            }
            if (y < array.GetLength(1) - 1 && array[x, y + 1] == a && adjacent(array, x, y + 1, newValue))
            {
                array = FloodFill(array, y + 1, x, newValue);
            }
            if (y>0 && array[x, y - 1] == a && adjacent(array, x, y - 1, newValue))
            {
                array = FloodFill(array, y - 1, x, newValue);
            }
            return array;
        }

        private static bool adjacent(int [,] array, int x, int y, int newValue)
        {
            try
            {
                if (array[x - 1, y] == newValue)
                    return true;
            }
            catch { }
            try
            {
                if (array[x + 1, y] == newValue)
                    return true;
            }
            catch { }
            try
            {
                if (array[x, y + 1] == newValue)
                    return true;
            }
            catch { }
            try
            {
                if (array[x, y - 1] == newValue)
                    return true;
            }
            catch { }
            return false;
        }
    }
}
